version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: openflag-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-openflag}
      POSTGRES_USER: ${POSTGRES_USER:-openflag}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-openflag_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-openflag}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - openflag-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: openflag-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - openflag-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: openflag-backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-openflag}:${POSTGRES_PASSWORD:-openflag_password}@postgres:5432/${POSTGRES_DB:-openflag}
      REDIS_URL: redis://redis:6379
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./backend/app:/app/app
    networks:
      - openflag-network
    restart: unless-stopped

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: openflag-frontend
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - openflag-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  openflag-network:
    driver: bridge
